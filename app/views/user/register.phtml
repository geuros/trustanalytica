<h2>Sign up using this form</h2>
<?php $this->tag->setDefaults( $data ); ?>
<?php echo $this->tag->form([ 'user/register/submit', 'class' => 'needs-validation', 'novalidate' => true ]); ?>
<div class="form-group">
	<label for="name">Name</label>
	<?php echo $this->tag->textField(['name',	'maxlength' => 50, 'required' => true, 'class' => 'form-control']); ?>
	<div class="invalid-feedback">
		Field is required.
	</div>
</div>

<div class="form-group">
	<label for="surname">Surname</label>
	<?php echo $this->tag->textField(['surname', 'maxlength' => 50, 'required' => true, 'class' => 'form-control']); ?>
	<div class="invalid-feedback">
		Field is required.
	</div>
</div>

<div class="form-group">
	<label for="email">Age</label>
	<?php echo $this->tag->numericField(['age', 'min' => 1, 'max' => 99, 'required' => true, 'class' => 'form-control']); ?>
	<div class="invalid-feedback">
		Provide valid number between 1 and 99.
	</div>
</div>

<div class="form-group">
	<label for="phone">Phone</label>
	<?php echo $this->tag->textField(['phone', 'required' => true, 'class' => 'form-control']); ?>
</div>

<div class="form-group">
	<label for="driver_licence">Driver Licence</label>
	<?php echo $this->tag->textField(['driver_licence', 'required' => true, 'class' => 'form-control']); ?>
</div>

<div class="form-group">
	<label for="address">Address</label>
	<?php echo $this->tag->textArea(['address', 'maxlength' => 1000, 'class' => 'form-control']); ?>
</div>

<div class="form-group">
	<label for="password">Password</label>
	<?php echo $this->tag->passwordField(['password', 'class' => 'form-control', 'required' => true]); ?>
	<div class="invalid-feedback">
		Field is required.
	</div>
</div>

<?php echo $this->tag->hiddenField([ $this->security->getTokenKey(), 'value' => $this->security->getToken()]); ?>

<?php echo $this->tag->submitButton(['Register', 'class' => 'btn btn-primary' ]); ?>
</form>
<script>
	( function() {
		'use strict';
		window.addEventListener( 'load', function() {
			var forms = document.getElementsByClassName( 'needs-validation' );
			var validation = Array.prototype.filter.call( forms, function( form ) {
				form.addEventListener( 'submit', function( event ) {
					if ( form.checkValidity() === false ) {
						event.preventDefault();
						event.stopPropagation();
					}
					form.classList.add( 'was-validated' );
				}, false );
			} );
		}, false );
	} )();
</script>